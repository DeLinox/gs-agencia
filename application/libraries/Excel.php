<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

require_once APPPATH."/third_party/excel/PHPExcel.php"; 

class Excel extends PHPExcel {

    public function __construct() { 
        parent::__construct(); 
    }
        
    public function excel_init() {
        // Create new PHPExcel object
        $objPHPExcel = new PHPExcel();
        // Set properties
        $objPHPExcel->getProperties()->setCreator("Sopre 2012")
                ->setLastModifiedBy("Sopre 2012")
                ->setTitle("Reporte Sopre 2012")
                ->setSubject("Reporte Sopre 2012 - Grupo Sistemas")
                ->setDescription("Report Generated by Sopre")
                ->setKeywords("reporte sopre")
                ->setCategory("Reportes");
        return $objPHPExcel;
    }

    public function excel_output($objPHPExcel, $filename, $tipo = "EXCEL") {
        $filename = substr($filename,0,100);
        if ($tipo == "EXCEL") {            
            // Redirect output to a clientâ€™s web browser (Excel2007)
            header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
            header('Cache-Control: max-age=0');

            $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
            $objWriter->save('php://output');
            exit;
        } elseif ($tipo == "PDF") {
            header('Content-Type: application/pdf');
            header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
            header('Cache-Control: max-age=0');

            $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'PDF');
            $objWriter->save('php://output');
            exit;
        }
    }
    
    public function write_table($objPHPExcel,$datos = NULL,$indx=1,$indy = 'A') {
        if(is_string($datos)){  //sql
            $this->FW->db->Query($datos,TRUE);
            $filas = array();
            if ($this->FW->db->NumRows() > 0) {
                $filas = $this->FW->db->getAllRows(FALSE);
            } else {
                $filas = array();
            }
            foreach ($filas as $fkey => $fila) {
                foreach ($fila as $ckey => $val) {
                    if (preg_match("/^\(.+\)$/i", $ckey)) {
                        unset($filas[$fkey][$ckey]);
                    }
                }
            }
            $array_datos = $filas;
        }else if(is_array($datos)){
            $array_datos = $datos;
        }else{
            $array_datos = array();
        }

        $resul = array('indx'=>$indx,'indy'=>$indy);
        
        if(count($array_datos)>0){
            $indyy = PHPExcel_Cell::columnIndexFromString($indy)-1;
            //write array
            $titulos = array_keys($array_datos[0]);
            foreach ($titulos as $key => $valor) {
                $objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($key+$indyy, $indx, $valor);
                $objPHPExcel->getActiveSheet()->getColumnDimensionByColumn($key+$indyy)->setAutoSize(true);
                $objPHPExcel->getActiveSheet()->getStyleByColumnAndRow($key+$indyy, $indx)->getFont()->setBold(true);
                $resul['indy'] = PHPExcel_Cell::stringFromColumnIndex($key+$indyy); 
            }

            $objPHPExcel->getActiveSheet()->getStyle($indy.$indx.":".$resul['indy'].$indx)->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID)->getStartColor()->setARGB('F2F2F2');

            $array_datos = array_map("array_values", $array_datos);
            foreach ($array_datos as $fkey => $fila) {
                foreach ($fila as $ckey => $valor) {
                    $objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($ckey+$indyy, $fkey + 1+$indx, $fila[$ckey]);
                }
                $resul['indx'] = $fkey + 1+$indx;
            }
//            $objPHPExcel->getActiveSheet()->getStyle($indy.$indx.':'.$resul['indy'].$resul['indx'])->getBorders()->getAllBorders()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
        }
        return $resul;
    } 

    public function excel_from_sqlarray($array_datos, $titulo, $filename, $tipo = "EXCEL") {

        $objPHPExcel = $this->excel_init();
        $objPHPExcel->setActiveSheetIndex(0);

        $this->write_table($objPHPExcel, $array_datos);

        // Rename sheet
        $objPHPExcel->getActiveSheet()->setTitle($titulo);
        // Set active sheet index to the first sheet, so Excel opens this as the first sheet
        $objPHPExcel->setActiveSheetIndex(0);

        $this->excel_output($objPHPExcel, $filename, $tipo);
    }
    
    public function config_page($objPHPExcel) {
        $objPHPExcel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
        $objPHPExcel->getActiveSheet()->getPageSetup()->setPaperSize(PHPExcel_Worksheet_PageSetup::PAPERSIZE_A4);
        $objPHPExcel->getActiveSheet()->getPageSetup()->setFitToWidth(1);
        $objPHPExcel->getActiveSheet()->getPageSetup()->setFitToHeight(0);

        $objPHPExcel->getActiveSheet()->getPageMargins()->setTop(0.4);
        $objPHPExcel->getActiveSheet()->getPageMargins()->setRight(0.4);
        $objPHPExcel->getActiveSheet()->getPageMargins()->setLeft(0.4);
        $objPHPExcel->getActiveSheet()->getPageMargins()->setBottom(0.4);
        return $objPHPExcel;
    }

}